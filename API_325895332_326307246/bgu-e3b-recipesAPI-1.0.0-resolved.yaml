openapi: 3.0.0
info:
  title: Family-Recipe API
  description: |
    Contract between the Vue frontend and the Node + Express backend (updated August 2025).   All paths, parameters and status-codes mirror the server implementation in **routes/auth.js**, **routes/recipes.js** and **routes/user.js**.
  version: 3.0.0
servers:
- url: https://virtserver.swaggerhub.com/bgu-e3b/recipesAPI/3.0.0
  description: SwaggerHub API Auto Mocking
- url: https://shahafr.cs.bgu.ac.il
  description: Production
- url: http://localhost:3000
  description: Local development
security:
- cookieAuth: []
paths:
  /countries:
    get:
      tags:
      - Auth
      summary: Get list of available countries
      description: Returns a list of countries for registration form, filtered and cached
      responses:
        "200":
          description: List of country names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Afghanistan", "Albania", "Algeria"]
        "500":
          description: Server error fetching countries
      security: []
  /Register:
    post:
      tags:
      - Auth
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "user created, please login"
                  redirect:
                    type: string
                    example: "/Login"
        "400":
          description: Validation failed or invalid country
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                    example: false
        "409":
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username taken"
                  success:
                    type: boolean
                    example: false
  /Login:
    post:
      tags:
      - Auth
      summary: Log in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          description: Login succeeded (session cookie set)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "login succeeded"
                  redirect:
                    type: string
                    example: "/recipes"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"
                  success:
                    type: boolean
                    example: false
        "401":
          description: Invalid username / password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"
                  success:
                    type: boolean
                    example: false
  /Logout:
    post:
      tags:
      - Auth
      summary: Log out
      responses:
        "200":
          description: Session cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "logout succeeded"
                  redirect:
                    type: string
                    example: "/recipes"
      security:
      - cookieAuth: []
  /about:
    get:
      tags:
      - Info
      summary: Project & team info with previous projects
      responses:
        "200":
          description: Enhanced project information including team and previous projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    example: "This project is all about family. Allowing you to store your traditional family recipes, be rest assured that with us your family would enjoy traditional meals for generations! Developed by a dedicated student team from Ben-Gurion University."
                  team:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamMember'
                    example:
                      - name: "Shahaf Har-Tsvi"
                        role: "Developer"
                        contact: "hartsvis@bgu.ac.il"
                      - name: "Shahar Navian"
                        role: "Developer"
                        contact: "navians@post.bgu.ac.il"
                  previousProjects:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        url:
                          type: string
                          format: uri
                    example:
                      - title: "Space Invaders"
                        url: "https://wed-2023.github.io/assignment2-325895332_326307246_assignment2/"
                      - title: "Varda's personal site"
                        url: "https://wed-2023.github.io/assignment1-326307246/"
                      - title: "Trevor's personal site"
                        url: "https://wed-2023.github.io/325895332/"
      security: []
  /recipes:
    get:
      tags:
      - Recipes
      summary: Main-page data (random & last-watched)
      responses:
        "200":
          description: Mixed random / last-watched previews with enhanced user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  random:
                    type: array
                    items:
                      $ref: '#/components/schemas/RecipePreview'
                    description: Array of 3 random Spoonacular recipes
                  lastWatched:
                    oneOf:
                    - type: array
                      items:
                        $ref: '#/components/schemas/RecipePreview'
                      description: Last watched recipes (when user is authenticated)
                    - type: object
                      properties:
                        loginRequired:
                          type: boolean
                          enum: [true]
                        loginUrl:
                          type: string
                          example: "/login"
                      description: Login prompt (when user is not authenticated)
      security: []
    post:
      tags:
      - Recipes
      summary: Create a new recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
        required: true
      responses:
        "201":
          description: Recipe created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipe_id:
                    oneOf:
                    - type: string
                    - type: integer
                    description: The ID of the created recipe
                  message:
                    type: string
                    example: "Recipe created"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing mandatory fields"
                  success:
                    type: boolean
                    example: false
        "401":
          description: Login required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login required"
                  success:
                    type: boolean
                    example: false
      security:
      - cookieAuth: []
  /recipes/search:
    get:
      tags:
      - Recipes
      summary: Search recipes (Spoonacular)
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: number
        in: query
        required: false
        schema:
          type: integer
          enum: [5, 10, 15]
          default: 5
        description: Number of recipes to return (allowed values: 5, 10, 15)
      - name: cuisine
        in: query
        required: false
        schema:
          type: string
      - name: diet
        in: query
        required: false
        schema:
          type: string
      - name: intolerances
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "400":
          description: Missing query parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Query parameter is required"
                  success:
                    type: boolean
                    example: false
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Get full recipe details
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      - name: source
        in: query
        required: true
        schema:
          type: string
          enum:
          - db
          - spoon
      responses:
        "200":
          description: Full recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDetails'
        "400":
          description: Invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid recipeId"
                  success:
                    type: boolean
                    example: false
        "404":
          description: Recipe not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe not found"
                  success:
                    type: boolean
                    example: false
  /recipes/{recipeId}/cooking-mode:
    get:
      tags:
      - Recipes
      summary: Get recipe in cooking mode format
      description: Returns recipe formatted for step-by-step cooking with adjustable servings
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      - name: source
        in: query
        required: false
        schema:
          type: string
          enum:
          - db
          - spoon
          default: spoon
      - name: servings
        in: query
        required: false
        schema:
          type: number
          minimum: 0.1
          default: 1
        description: Serving size multiplier for ingredient quantities
      responses:
        "200":
          description: Recipe data formatted for cooking mode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CookingModeResponse'
        "400":
          description: Invalid parameters or serving multiplier
        "404":
          description: Recipe not found
  /recipes/{recipeId}/meal-plan:
    post:
      tags:
      - Recipes
      summary: Add recipe to user's meal plan
      description: Note - This endpoint currently returns a mock response as meal plan storage is not fully implemented
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanRequest'
      responses:
        "201":
          description: Recipe added to meal plan (mock response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealPlanResponse'
        "400":
          description: Invalid request data
        "401":
          description: Login required
      security:
      - cookieAuth: []
  /recipes/{recipeId}/cooking-progress:
    get:
      tags:
      - Recipes
      summary: Get saved cooking progress for a recipe
      description: Returns cooking progress stored in user session (not persistent across sessions)
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      - name: source
        in: query
        required: false
        schema:
          type: string
          enum:
          - db
          - spoon
          default: spoon
      responses:
        "200":
          description: Current cooking progress from session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CookingProgress'
        "400":
          description: Invalid recipe ID
        "401":
          description: Login required
      security:
      - cookieAuth: []
    post:
      tags:
      - Recipes
      summary: Save cooking progress for a recipe
      description: Saves cooking progress to user session (not persistent across sessions)
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CookingProgressUpdate'
      responses:
        "200":
          description: Progress saved to session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CookingProgressSaveResponse'
        "400":
          description: Invalid progress data
        "401":
          description: Login required
      security:
      - cookieAuth: []
    delete:
      tags:
      - Recipes
      summary: Clear cooking progress for a recipe
      description: Removes cooking progress from user session
      parameters:
      - name: recipeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/recipeId'
      - name: source
        in: query
        required: false
        schema:
          type: string
          enum:
          - db
          - spoon
          default: spoon
      responses:
        "200":
          description: Progress cleared from session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        "400":
          description: Invalid recipe ID
        "401":
          description: Login required
      security:
      - cookieAuth: []
  /users/favorites:
    get:
      tags:
      - Users
      summary: List all favorite recipes
      responses:
        "200":
          description: Favorite previews grouped by source
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
                description: Array of favorite recipes with source and favorite status
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  success:
                    type: boolean
                    example: false
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: Add recipe to favorites
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteToggle'
        required: true
      responses:
        "200":
          description: Saved/removed from favorites with status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteResponse'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input for favorite recipe - recipeId required"
                  success:
                    type: boolean
                    example: false
        "404":
          description: Recipe not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe not found"
                  success:
                    type: boolean
                    example: false
      security:
      - cookieAuth: []
  /users/myRecipes:
    get:
      tags:
      - Users
      summary: All recipes created by the user
      responses:
        "200":
          description: User-created recipe previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  success:
                    type: boolean
                    example: false
      security:
      - cookieAuth: []
  /users/familyRecipes:
    get:
      tags:
      - Users
      summary: Family recipes created by the user
      responses:
        "200":
          description: Family recipe previews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
                  success:
                    type: boolean
                    example: false
      security:
      - cookieAuth: []
  /alive:
    get:
      tags:
      - Health
      summary: Server liveness probe
      description: Simple endpoint to check if server is running
      responses:
        "200":
          description: Server is alive and responding
          content:
            text/plain:
              schema:
                type: string
                example: "I'm alive"
      security: []
components:
  schemas:
    UserRegistration:
      required:
      - confirmPassword
      - country
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        username:
          pattern: "^[A-Za-z]{3,8}$"
          type: string
          description: "Username must be 3-8 letters only"
        firstname:
          type: string
          minLength: 1
          description: "First name is required and must be non-empty"
        lastname:
          type: string
          minLength: 1
          description: "Last name is required and must be non-empty"
        country:
          type: string
          minLength: 1
          description: Value must appear in https://restcountries.com/v3.1/all
        password:
          type: string
          minLength: 5
          maxLength: 10
          description: "5-10 chars, ≥1 digit, ≥1 special character"
        confirmPassword:
          type: string
          description: "Must match password field"
        email:
          type: string
          format: email
          description: "Valid email format required"
        profilePic:
          type: string
          format: uri
    UserLogin:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: "Username is required and must be non-empty"
        password:
          type: string
          minLength: 1
          description: "Password is required and must be non-empty"
    FavoriteToggle:
      required:
      - recipeId
      type: object
      properties:
        recipeId:
          oneOf:
          - type: string
          - type: integer
        isSpoonacular:
          type: boolean
          default: true
    RecipePreview:
      required:
      - id
      - title
      - image
      - readyInMinutes
      - vegan
      - vegetarian
      - glutenFree
      - isSpoonacular
      type: object
      properties:
        id:
          oneOf:
          - type: string
          - type: integer
        title:
          type: string
        image:
          type: string
          format: uri
        readyInMinutes:
          type: integer
        vegan:
          type: boolean
        vegetarian:
          type: boolean
        glutenFree:
          type: boolean
        servings:
          type: integer
          description: Number of servings (available for DB recipes)
        isFavorite:
          type: boolean
          description: Whether the recipe is in user's favorites (only when user is authenticated)
        isWatched:
          type: boolean
          description: Whether the recipe has been viewed by the user (only when user is authenticated)
        isSpoonacular:
          type: boolean
          description: Whether the recipe is from Spoonacular API or local database
        source:
          type: string
          enum: ['db', 'spoon']
          description: Source identifier for the recipe
    RecipeDetails:
      allOf:
      - $ref: '#/components/schemas/RecipePreview'
      - required:
        - ingredients
        - instructions
        - servings
        type: object
        properties:
          servings:
            type: integer
          instructions:
            type: array
            items:
              type: string
          ingredients:
            type: array
            items:
              oneOf:
              - type: string
              - required:
                - name
                - quantity
                type: object
                properties:
                  name:
                    type: string
                  quantity:
                    type: string
          source:
            type: string
            description: Source of the recipe (db or spoon)
            enum: ['db', 'spoon']
          isFamilyRecipe:
            type: boolean
            description: Whether this is a family recipe (only for DB recipes)
          familyWho:
            type: string
            description: Who in the family this recipe is from
          familyWhen:
            type: string
            description: When this family recipe originated
    NewRecipe:
      required:
      - ingredients
      - instructions
      - readyInMinutes
      - servings
      - title
      type: object
      properties:
        title:
          type: string
        image:
          type: string
          format: uri
        readyInMinutes:
          minimum: 1
          type: integer
        vegan:
          type: boolean
          default: false
        vegetarian:
          type: boolean
          default: false
        glutenFree:
          type: boolean
          default: false
        servings:
          minimum: 1
          type: integer
        instructions:
          minItems: 1
          type: array
          items:
            type: string
        ingredients:
          minItems: 1
          type: array
          items:
            oneOf:
            - type: string
            - required:
              - name
              - quantity
              type: object
              properties:
                name:
                  type: string
                quantity:
                  type: string
        isFamilyRecipe:
          type: boolean
          default: false
        familyStory:
          type: object
          properties:
            who:
              type: string
              description: Who in the family this recipe is from
            when:
              type: string
              description: When this family recipe originated
    TeamMember:
      required:
      - contact
      - name
      - role
      type: object
      properties:
        name:
          type: string
        role:
          type: string
        contact:
          type: string
    CookingModeResponse:
      type: object
      required:
        - id
        - title
        - ingredients
        - instructions
        - currentStep
        - totalSteps
      properties:
        id:
          oneOf:
          - type: string
          - type: integer
        title:
          type: string
        image:
          type: string
          format: uri
        servings:
          type: integer
        readyInMinutes:
          type: integer
        ingredients:
          type: array
          items:
            oneOf:
            - type: string
            - type: object
              properties:
                name:
                  type: string
                quantity:
                  type: string
        instructions:
          type: array
          items:
            type: string
        currentStep:
          type: integer
          description: Current step index (0-based)
        totalSteps:
          type: integer
          description: Total number of steps
        servingMultiplier:
          type: number
          description: Multiplier applied to ingredient quantities
        originalServings:
          type: integer
          description: Original number of servings before multiplier
    MealPlanRequest:
      type: object
      required:
        - date
        - mealType
      properties:
        date:
          type: string
          format: date
        mealType:
          type: string
          enum: [breakfast, lunch, dinner, snack]
        servings:
          type: integer
          minimum: 1
          default: 1
        source:
          type: string
          enum: [db, spoon]
          default: spoon
    MealPlanResponse:
      type: object
      required:
        - message
        - mealPlan
      properties:
        message:
          type: string
        mealPlan:
          type: object
          properties:
            user_id:
              type: integer
            recipe_id:
              oneOf:
              - type: string
              - type: integer
            isSpoonacular:
              type: boolean
            date:
              type: string
              format: date
            mealType:
              type: string
            servings:
              type: integer
            created_at:
              type: string
              format: date-time
    CookingProgress:
      type: object
      required:
        - currentStep
        - completedSteps
        - checkedIngredients
        - servingMultiplier
        - startTime
        - lastUpdated
      properties:
        currentStep:
          type: integer
          minimum: 0
        completedSteps:
          type: object
          description: Map of step index to completion status
        checkedIngredients:
          type: object
          description: Map of ingredient index to checked status
        servingMultiplier:
          type: number
          minimum: 0.1
        startTime:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
    CookingProgressUpdate:
      type: object
      required:
        - currentStep
      properties:
        currentStep:
          type: integer
          minimum: 0
        completedSteps:
          type: object
        checkedIngredients:
          type: object
        servingMultiplier:
          type: number
          minimum: 0.1
        source:
          type: string
          enum: [db, spoon]
          default: spoon
    CookingProgressSaveResponse:
      type: object
      required:
        - message
        - progress
      properties:
        message:
          type: string
        progress:
          $ref: '#/components/schemas/CookingProgress'
    FavoriteResponse:
      type: object
      required:
        - message
        - isFavorite
        - success
      properties:
        message:
          type: string
          example: "The Recipe successfully added to favorites"
        isFavorite:
          type: boolean
          description: Current favorite status after toggle
        success:
          type: boolean
          example: true
    recipeId:
      oneOf:
      - type: string
      - type: integer
    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: session
      in: cookie
